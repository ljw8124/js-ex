// 특이 케이스 추가하기
// 특이 케이스는 여러 형태로 표현할 수 있는데, 단순히 데이터를 읽기만 하는 것이라면 반환할 값들을 담은 리터럴 객체 형태로 준비한다.
// 그 이상의 동작을 해야 된다면, 필요한 메서드를 담은 객체를 생성한다.
// 특이 케이스 객체는 이를 캡슐화한 클래스가 반환하도록 만들수도 있고, 변환을 거쳐 데이터 구조에 추가시키는 형태도 될 수 있다.

// 절차
// 1. 컨테이너에 특이 케이스인지를 검사하는 속성을 추가하고, false 를 반환하게 한다.
// 2. 특이 케이스 객체를 만든다. 이 객체는 특이 케이스인지를 검사하는 속성만 포함되며, 이 속성을 true 를 반환하게 한다.
// 3. 클라이언트에서 특이 케이스인지를 검사하는 코드를 함수로 추출한다. 모든 클라이언트가 값을 직접 비교하는 대신
//    방금 추출한 함수를 사용하도록 고친다.
// 4. 코드에 새로운 특이 케이스 대상을 추가한다. 함수의 반환 값으로 받거나 변환 함수를 적용하면 된다.
// 5. 특이 케이스를 검사하는 함수 본문을 수정하여 특이 케이스 객체의 속성을 사용하도록 한다.
// 6. 테스트한다.
// 7. 여러 함수를 '클래스로 묶기'나 '여러 함수를 변환 함수로 묶기'를 적용하여 특이 케이스를 처리하는 공통 동작을 새로운 요소로 옮긴다.
// 8. 아직도 특이 케이스 검사 함수를 이용하는 곳이 남아 있다면 검사 함수를 인라인 한다.

// ex.
// 코드를 별도 함수로 추출하여 한데로 모음
function isUnknown(arg) {
  if(!((arg instanceof Customer) || (arg === "미확인 고객"))) {
    throw new Error(`잘못된 값과 비교: <${arg}>`);
  }
  return (arg === "미확인 고객");
}



