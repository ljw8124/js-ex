// 클래스 추출하기
// 클래스를 명확하게 함으로서 소스에 주어진 역할만 처리하도록 만든다.

// 메서드와 데이터가 너무 많은 클래스는 이해하기 쉽지 않으니 잘 살펴보고 적절히 분리하는 것이 좋다.
// 또한 데이터와 메서드를 따로 묶을 수 있다면 따로 클래스로 묶으라는 신호이다.

// 절차
// 1. 클래스의 역할을 분리할 방법을 정한다
// 2. 분리될 역할을 담달할 클래스를 새로 만든다.
// 3. 원래 클래스의 생성자에서 새로운 클래스의 인스턴스를 생성하여 필드에 저장해둔다.
// 4. 분리될 역할에 필요한 필드들을 새 클래스로 옮긴다('필드옮기기'). 옮길 때마다 테스트한다.
// 5. 메서드들도 새 클래스로 옮긴다('함수옮기기'). 이 때 호출 당하는 일이 더 많은 메서드부터 옮긴다. 그리고 테스트한다.
// 6. 양쪽 클래스의 인터페이스를 보면서 불필요한 메서들르 제거하고, 이름도 새로운 환경에 맞춘다.
// 7. 새 클래스를 외부로 노출할지 정한다. 노출하려거든 새 클래스에 '참조를 값으로 바꾸기' 를 적용할지 고려해본다.

////////////////////////////////////////////////////////////////////////////////////////////////

// 클래스 인라인하기
// 클래스 추출하기를 반대로 사용하는 방법이다.
// 역할을 옮기는 리팩터링을 하고나니 특정 클래스에 남은 역할이 거의 없을 때 가장 많이 사용하는 클래스에 흡수한다.

// 절차
// 1. 소스 클래스의 각 public 메서드에 대응하는 메서드들을 타깃 클래스에 생성한다. 이 메서드들은 단순히 작업을 소스 클래스로 위임해야 한다.
// 2. 소스 클래스의 메서드를 사용하는 코드를 모두 타깃 클래스의 위임 메서드를 사용하도록 바꾼다. 하나씩 바꿀 때마다 테스트한다.
// 3. 소스 클래스의 메서드와 필드를 모두 타깃 클래스로 옮긴다. 하나씩 옮길 때마다 테스트한다.
// 4. 소스 클래스를 삭제하고 조의를 표한다.